apply plugin: 'groovy'
apply plugin: 'application'

// Uncomment the line below if you get a verification error
// applicationDefaultJvmArgs = ["-noverify"]
mainClassName = 'bpdf.BpdfLauncher'
buildDir = './build'
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.1.0'

/* 
 * Used to avoid warning "bootstrap class path not set in conjunction 
 * with -source 1.6" by setting the bootclasspath to compile against the 
 * rt.jar (or equivalent) for the older platform. javac will dutifully 
 * use the old language rules combined with new libraries, which can 
 * result in class files that do not work on the older platform since 
 * references to non-existent methods can get included. 
 * Comment out if compilation does not work in your computer.
 */
def bootClasspathStr = "$System.env.JAVA_HOME/jre/lib/rt.jar"
project.tasks.withType(AbstractCompile, 
    { 
    // options is always there but not defined on AbstractCompile 
    // so going to hit it anyway
    AbstractCompile ac ->
    ac.options.bootClasspath = bootClasspathStr 
    }
)

// Compile Groovy BEFORE Java
sourceSets {
    main {
        groovy {
                srcDirs = ['src/main/groovy', 'src/main/java']
            }
        java {
            srcDirs = [] // don't compile Java code twice
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

// maven repository for library dependencies
repositories {
    mavenCentral()
}

// library dependencies
dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'org.tinyjee.jgraphx:jgraphx:1.10.1.3'
    compile 'commons-cli:commons-cli:1.4'
    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes  'Implementation-Title': project.name,
                    'Implementation-Version': version,
                    'Main-Class': mainClassName
    }
    // to include library dependencies in the jar
    from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
